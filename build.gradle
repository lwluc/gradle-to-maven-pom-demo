import groovy.json.JsonBuilder

plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'de.weinbrecht.luc.sample.gradle'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:3.3.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:3.3.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generateModuleJson {
	def buildDir = mkdir(project.layout.buildDirectory.dir("publications/customLibrary")).path
	doLast {
		def configurationNames = project.configurations.names
		def dependencies = configurationNames.collect {
			project.configurations.getByName(it).allDependencies.collect { it.name }
		}.flatten().unique { a, b -> a <=> b }
		def json = new JsonBuilder(dependencies: dependencies)

		new File(buildDir + "/module.json").write(json.toPrettyString())
	}
}

publishing {
	publications {
		customLibrary(MavenPublication) {
			from components.java

			pom.withXml { pomXml -> replaceDependenciesWith('compile', pomXml) }
		}
	}

	repositories {
		maven {
			name = 'sampleRepo'
			url = layout.buildDirectory.dir("repo")
		}
	}
}

void replaceDependenciesWith(String configurationName, XmlProvider pomXml) {
	var implementationConfigurationName = 'implementation'
	var consideredProdScopes = [implementationConfigurationName]
	var consideredTestScopes = ['testImplementation', 'testRuntimeOnly']

	var consideredProdDependencies = consideredProdScopes.collectEntries{ scope -> [implementationConfigurationName, project.configurations.getByName(scope).allDependencies]  }
	var consideredTestDependencies = consideredTestScopes.collectEntries{ scope -> [scope, project.configurations.getByName(scope).allDependencies.findAll { deps -> consideredProdDependencies.findAll { !it.value.contains(deps)} }]  }

	Node dependencies = new Node(null, 'dependencies')
	var consideredDependencies = consideredProdDependencies
	consideredDependencies.putAll(consideredTestDependencies)
	consideredDependencies.each { scope, dependenciesOfScope ->
		dependencies.append(createDependencyNode(dependenciesOfScope, scope))
	}
	pomXml.asNode().dependencies*.replaceNode(dependencies)
}

static Node createDependencyNode(Object dep, String configuration) {
	Node dependency = new Node(null, 'dependency')
	dependency.appendNode('groupId', dep.group)
	dependency.appendNode('artifactId', dep.name)
	dependency.appendNode('version', dep.version)
	dependency.appendNode('scope', mapGradleConfigurationToMavenScope(configuration))
	return dependency
}

static String mapGradleConfigurationToMavenScope(String gradleScope) {
	switch (gradleScope) {
		case 'compileOnly':
			return 'provided'
		case 'testImplementation':
			return 'test'
		case 'testRuntimeOnly':
			return 'test'
		default:
			return 'compile'
	}
}