plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'de.weinbrecht.luc.sample.gradle'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:3.3.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:3.3.2'
}

tasks.named('test') {
	useJUnitPlatform()
}


publishing {
	publications {
		customLibrary(MavenPublication) {
			from components.java

			pom.withXml { pomXml -> replaceDependenciesWith('compile', pomXml) }
		}
	}

	repositories {
		maven {
			name = 'sampleRepo'
			url = layout.buildDirectory.dir("repo")
		}
	}
}

void replaceDependenciesWith(String configurationName, XmlProvider pomXml) {
	Node dependencies = new Node(null, 'dependencies')
	var consideredScopes = ['implementation', 'testImplementation', 'testRuntimeOnly']
	consideredScopes.each { scope ->
		project.configurations.getByName(scope).allDependencies.each { dep ->
			Node dependency = new Node(null, 'dependency')
			dependency.appendNode('groupId', dep.group)
			dependency.appendNode('artifactId', dep.name)
			dependency.appendNode('version', dep.version)
			dependency.appendNode('scope', mapGradleScopeToMap(scope))
			dependencies.append(dependency)
		}
	}
	pomXml.asNode().dependencies*.replaceNode(dependencies)
}

static String mapGradleScopeToMap(String gradleScope) {
	switch (gradleScope) {
		case 'compileOnly':
			return 'provided'
		case 'testImplementation':
			return 'test'
		case 'testRuntimeOnly':
			return 'test'
		default:
			return 'compile'
	}
}